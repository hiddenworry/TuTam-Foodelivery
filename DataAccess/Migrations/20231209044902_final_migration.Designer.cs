// <auto-generated />
using System;
using DataAccess.DbContextData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(FoodDonationDeliveryDbContext))]
    [Migration("20231209044902_final_migration")]
    partial class final_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Entities.AcceptableAidRequest", b =>
                {
                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AidRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectingReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId", "AidRequestId");

                    b.HasIndex("AidRequestId");

                    b.ToTable("AcceptableAidRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.AcceptableDonatedRequest", b =>
                {
                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DonatedRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectingReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId", "DonatedRequestId");

                    b.HasIndex("DonatedRequestId");

                    b.ToTable("AcceptableDonatedRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityBranch", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("ActivityBranches");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityFeedbacks");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityMembers");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityRoles");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhaseId");

                    b.ToTable("ActivityTasks");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityTypeComponent", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityId", "ActivityTypeId");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("ActivityTypeComponents");
                });

            modelBuilder.Entity("DataAccess.Entities.AidItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("AidRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AidRequestId");

                    b.HasIndex("ItemId");

                    b.ToTable("AidItems");
                });

            modelBuilder.Entity("DataAccess.Entities.AidRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharityUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSelfShipping")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ScheduledTimes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CharityUnitId");

                    b.ToTable("AidRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.AttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ItemTemplateAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTemplateAttributeId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("DataAccess.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("BranchAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchAdminId")
                        .IsUnique();

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DataAccess.Entities.Charity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Charities");
                });

            modelBuilder.Entity("DataAccess.Entities.CharityUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("CharityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHeadquarter")
                        .HasColumnType("bit");

                    b.Property<string>("LegalDocuments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("UserId");

                    b.ToTable("CharityUnits");
                });

            modelBuilder.Entity("DataAccess.Entities.CollaboratorApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackOfIdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrontOfIdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CollaboratorApplications");
                });

            modelBuilder.Entity("DataAccess.Entities.DeliveryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("AidItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DonatedItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double?>("ReceivedQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AidItemId");

                    b.HasIndex("DeliveryRequestId");

                    b.HasIndex("DonatedItemId");

                    b.ToTable("DeliveryItems");
                });

            modelBuilder.Entity("DataAccess.Entities.DeliveryRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("AidRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CanceledReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentScheduledTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DonatedRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProofImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduledTimes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AidRequestId");

                    b.HasIndex("BranchId");

                    b.HasIndex("DonatedRequestId");

                    b.ToTable("DeliveryRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.DonatedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("DonatedRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InitialExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DonatedRequestId");

                    b.HasIndex("ItemId");

                    b.ToTable("DonatedItems");
                });

            modelBuilder.Entity("DataAccess.Entities.DonatedRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ScheduledTimes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("DonatedRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstimatedExpirationDays")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MaximumTransportVolume")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTemplateId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemAttributeValue", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeValueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId", "AttributeValueId");

                    b.HasIndex("AttributeValueId");

                    b.ToTable("ItemAttributeValues");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ItemUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemUnitId");

                    b.HasIndex("ItemcategoryId");

                    b.ToTable("ItemTemplates");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemTemplateAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ItemTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTemplateId");

                    b.ToTable("ItemTemplateAttributes");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ItemUnits");
                });

            modelBuilder.Entity("DataAccess.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataAccess.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DataAccess.Entities.Phase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("DataAccess.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreaterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreaterId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DataAccess.Entities.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("DataAccess.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleMember", b =>
                {
                    b.Property<Guid>("ActivityRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityRoleId", "ActivityMemberId");

                    b.HasIndex("ActivityMemberId");

                    b.ToTable("RoleMembers");
                });

            modelBuilder.Entity("DataAccess.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleTask", b =>
                {
                    b.Property<Guid>("ActivityRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActivityRoleId", "ActivityTaskId");

                    b.HasIndex("ActivityTaskId");

                    b.ToTable("RoleTasks");
                });

            modelBuilder.Entity("DataAccess.Entities.ScheduledRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduledRoutes");
                });

            modelBuilder.Entity("DataAccess.Entities.ScheduledRouteDeliveryRequest", b =>
                {
                    b.Property<Guid>("ScheduledRouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceToReachThisOrNextAsMeters")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeToReachThisOrNextAsSeconds")
                        .HasColumnType("float");

                    b.HasKey("ScheduledRouteId", "DeliveryRequestId");

                    b.HasIndex("DeliveryRequestId");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.ToTable("ScheduledRouteDeliveryRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("DataAccess.Entities.StockUpdatedHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("StockUpdatedHistories");
                });

            modelBuilder.Entity("DataAccess.Entities.StockUpdatedHistoryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("AidRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeliveryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<Guid?>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StockUpdatedHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AidRequestId");

                    b.HasIndex("DeliveryItemId");

                    b.HasIndex("StockId");

                    b.HasIndex("StockUpdatedHistoryId");

                    b.ToTable("StockUpdatedHistoryDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.TargetProcess", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Process")
                        .HasColumnType("float");

                    b.Property<double>("Target")
                        .HasColumnType("float");

                    b.HasKey("ActivityId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("TargetProcesses");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCollaborator")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpCodeExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifyCodeExpiration")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("DataAccess.Entities.AcceptableAidRequest", b =>
                {
                    b.HasOne("DataAccess.Entities.AidRequest", "AidRequest")
                        .WithMany("AcceptableAidRequests")
                        .HasForeignKey("AidRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Branch", "Branch")
                        .WithMany("AcceptableAidRequests")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AidRequest");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccess.Entities.AcceptableDonatedRequest", b =>
                {
                    b.HasOne("DataAccess.Entities.Branch", "Branch")
                        .WithMany("AcceptableDonatedRequests")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.DonatedRequest", "DonatedRequest")
                        .WithMany("AcceptableDonatedRequests")
                        .HasForeignKey("DonatedRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("DonatedRequest");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityBranch", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("ActivityBranches")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Branch", "Branch")
                        .WithMany("ActivityBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityFeedback", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("ActivityFeedbacks")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("ActivityFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityMember", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("ActivityMembers")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("ActivityMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityRole", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("ActivityRoles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityTask", b =>
                {
                    b.HasOne("DataAccess.Entities.Phase", "Phase")
                        .WithMany("ActivityTasks")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityTypeComponent", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("ActivityTypeComponents")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ActivityType", "ActivityType")
                        .WithMany("ActivityTypeComponents")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ActivityType");
                });

            modelBuilder.Entity("DataAccess.Entities.AidItem", b =>
                {
                    b.HasOne("DataAccess.Entities.AidRequest", "AidRequest")
                        .WithMany("AidItems")
                        .HasForeignKey("AidRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithMany("AidItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AidRequest");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataAccess.Entities.AidRequest", b =>
                {
                    b.HasOne("DataAccess.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("DataAccess.Entities.CharityUnit", "CharityUnit")
                        .WithMany("AidRequests")
                        .HasForeignKey("CharityUnitId");

                    b.Navigation("Branch");

                    b.Navigation("CharityUnit");
                });

            modelBuilder.Entity("DataAccess.Entities.AttributeValue", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemTemplateAttribute", "ItemTemplateAttribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ItemTemplateAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplateAttribute");
                });

            modelBuilder.Entity("DataAccess.Entities.Branch", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "BranchAdmin")
                        .WithOne("Branch")
                        .HasForeignKey("DataAccess.Entities.Branch", "BranchAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchAdmin");
                });

            modelBuilder.Entity("DataAccess.Entities.CharityUnit", b =>
                {
                    b.HasOne("DataAccess.Entities.Charity", "Charity")
                        .WithMany("CharityUnits")
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("CharityUnit")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.CollaboratorApplication", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithOne("CollaboratorApplication")
                        .HasForeignKey("DataAccess.Entities.CollaboratorApplication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.DeliveryItem", b =>
                {
                    b.HasOne("DataAccess.Entities.AidItem", "AidItem")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("AidItemId");

                    b.HasOne("DataAccess.Entities.DeliveryRequest", "DeliveryRequest")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("DeliveryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.DonatedItem", "DonatedItem")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("DonatedItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AidItem");

                    b.Navigation("DeliveryRequest");

                    b.Navigation("DonatedItem");
                });

            modelBuilder.Entity("DataAccess.Entities.DeliveryRequest", b =>
                {
                    b.HasOne("DataAccess.Entities.AidRequest", "AidRequest")
                        .WithMany("DeliveryRequests")
                        .HasForeignKey("AidRequestId");

                    b.HasOne("DataAccess.Entities.Branch", "Branch")
                        .WithMany("DeliveryRequests")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.DonatedRequest", "DonatedRequest")
                        .WithMany("DeliveryRequests")
                        .HasForeignKey("DonatedRequestId");

                    b.Navigation("AidRequest");

                    b.Navigation("Branch");

                    b.Navigation("DonatedRequest");
                });

            modelBuilder.Entity("DataAccess.Entities.DonatedItem", b =>
                {
                    b.HasOne("DataAccess.Entities.DonatedRequest", "DonatedRequest")
                        .WithMany("DonatedItems")
                        .HasForeignKey("DonatedRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithMany("DonatedItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonatedRequest");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataAccess.Entities.DonatedRequest", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("DonatedRequests")
                        .HasForeignKey("ActivityId");

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("DonatedRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemTemplate", "ItemTemplate")
                        .WithMany("Items")
                        .HasForeignKey("ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemAttributeValue", b =>
                {
                    b.HasOne("DataAccess.Entities.AttributeValue", "AttributeValue")
                        .WithMany("ItemAttributeValues")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithMany("ItemAttributeValues")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemTemplate", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemUnit", "Unit")
                        .WithMany("ItemTemplates")
                        .HasForeignKey("ItemUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ItemCategory", "ItemCategory")
                        .WithMany("ItemTemplates")
                        .HasForeignKey("ItemcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemTemplateAttribute", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemTemplate", "ItemTemplate")
                        .WithMany("ItemTemplateAttributes")
                        .HasForeignKey("ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");
                });

            modelBuilder.Entity("DataAccess.Entities.Phase", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("Phases")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataAccess.Entities.Post", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "Creater")
                        .WithMany("Posts")
                        .HasForeignKey("CreaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creater");
                });

            modelBuilder.Entity("DataAccess.Entities.PostComment", b =>
                {
                    b.HasOne("DataAccess.Entities.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Report", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleMember", b =>
                {
                    b.HasOne("DataAccess.Entities.ActivityMember", "ActivityMember")
                        .WithMany("RoleMembers")
                        .HasForeignKey("ActivityMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ActivityRole", "ActivityRole")
                        .WithMany("RoleMembers")
                        .HasForeignKey("ActivityRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityMember");

                    b.Navigation("ActivityRole");
                });

            modelBuilder.Entity("DataAccess.Entities.RolePermission", b =>
                {
                    b.HasOne("DataAccess.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.RoleTask", b =>
                {
                    b.HasOne("DataAccess.Entities.ActivityRole", "ActivityRole")
                        .WithMany("RoleTasks")
                        .HasForeignKey("ActivityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ActivityTask", "ActivityTask")
                        .WithMany("RoleTasks")
                        .HasForeignKey("ActivityTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityRole");

                    b.Navigation("ActivityTask");
                });

            modelBuilder.Entity("DataAccess.Entities.ScheduledRoute", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("ScheduledRoutes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.ScheduledRouteDeliveryRequest", b =>
                {
                    b.HasOne("DataAccess.Entities.DeliveryRequest", "DeliveryRequest")
                        .WithMany("ScheduledRouteDeliveryRequests")
                        .HasForeignKey("DeliveryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Report", "Report")
                        .WithOne("ScheduledRouteDeliveryRequest")
                        .HasForeignKey("DataAccess.Entities.ScheduledRouteDeliveryRequest", "ReportId");

                    b.HasOne("DataAccess.Entities.ScheduledRoute", "ScheduledRoute")
                        .WithMany("ScheduledRouteDeliveryRequests")
                        .HasForeignKey("ScheduledRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryRequest");

                    b.Navigation("Report");

                    b.Navigation("ScheduledRoute");
                });

            modelBuilder.Entity("DataAccess.Entities.Stock", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("Stocks")
                        .HasForeignKey("ActivityId");

                    b.HasOne("DataAccess.Entities.Branch", "Branch")
                        .WithMany("Stocks")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithMany("Stocks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("Stocks")
                        .HasForeignKey("UserId");

                    b.Navigation("Activity");

                    b.Navigation("Branch");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.StockUpdatedHistory", b =>
                {
                    b.HasOne("DataAccess.Entities.Branch", "Branch")
                        .WithMany("StockUpdatedHistories")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DataAccess.Entities.StockUpdatedHistoryDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.AidRequest", "AidRequest")
                        .WithMany("StockUpdatedHistoryDetails")
                        .HasForeignKey("AidRequestId");

                    b.HasOne("DataAccess.Entities.DeliveryItem", "DeliveryItem")
                        .WithMany("StockUpdatedHistoryDetails")
                        .HasForeignKey("DeliveryItemId");

                    b.HasOne("DataAccess.Entities.Stock", "Stock")
                        .WithMany("StockUpdatedHistoryDetails")
                        .HasForeignKey("StockId");

                    b.HasOne("DataAccess.Entities.StockUpdatedHistory", "StockUpdatedHistory")
                        .WithMany("StockUpdatedHistoryDetails")
                        .HasForeignKey("StockUpdatedHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AidRequest");

                    b.Navigation("DeliveryItem");

                    b.Navigation("Stock");

                    b.Navigation("StockUpdatedHistory");
                });

            modelBuilder.Entity("DataAccess.Entities.TargetProcess", b =>
                {
                    b.HasOne("DataAccess.Entities.Activity", "Activity")
                        .WithMany("TargetProcesses")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithMany("TargetProcesses")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.UserPermission", b =>
                {
                    b.HasOne("DataAccess.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Activity", b =>
                {
                    b.Navigation("ActivityBranches");

                    b.Navigation("ActivityFeedbacks");

                    b.Navigation("ActivityMembers");

                    b.Navigation("ActivityRoles");

                    b.Navigation("ActivityTypeComponents");

                    b.Navigation("DonatedRequests");

                    b.Navigation("Phases");

                    b.Navigation("Stocks");

                    b.Navigation("TargetProcesses");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityMember", b =>
                {
                    b.Navigation("RoleMembers");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityRole", b =>
                {
                    b.Navigation("RoleMembers");

                    b.Navigation("RoleTasks");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityTask", b =>
                {
                    b.Navigation("RoleTasks");
                });

            modelBuilder.Entity("DataAccess.Entities.ActivityType", b =>
                {
                    b.Navigation("ActivityTypeComponents");
                });

            modelBuilder.Entity("DataAccess.Entities.AidItem", b =>
                {
                    b.Navigation("DeliveryItems");
                });

            modelBuilder.Entity("DataAccess.Entities.AidRequest", b =>
                {
                    b.Navigation("AcceptableAidRequests");

                    b.Navigation("AidItems");

                    b.Navigation("DeliveryRequests");

                    b.Navigation("StockUpdatedHistoryDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.AttributeValue", b =>
                {
                    b.Navigation("ItemAttributeValues");
                });

            modelBuilder.Entity("DataAccess.Entities.Branch", b =>
                {
                    b.Navigation("AcceptableAidRequests");

                    b.Navigation("AcceptableDonatedRequests");

                    b.Navigation("ActivityBranches");

                    b.Navigation("DeliveryRequests");

                    b.Navigation("StockUpdatedHistories");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("DataAccess.Entities.Charity", b =>
                {
                    b.Navigation("CharityUnits");
                });

            modelBuilder.Entity("DataAccess.Entities.CharityUnit", b =>
                {
                    b.Navigation("AidRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.DeliveryItem", b =>
                {
                    b.Navigation("StockUpdatedHistoryDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.DeliveryRequest", b =>
                {
                    b.Navigation("DeliveryItems");

                    b.Navigation("ScheduledRouteDeliveryRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.DonatedItem", b =>
                {
                    b.Navigation("DeliveryItems");
                });

            modelBuilder.Entity("DataAccess.Entities.DonatedRequest", b =>
                {
                    b.Navigation("AcceptableDonatedRequests");

                    b.Navigation("DeliveryRequests");

                    b.Navigation("DonatedItems");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.Navigation("AidItems");

                    b.Navigation("DonatedItems");

                    b.Navigation("ItemAttributeValues");

                    b.Navigation("Stocks");

                    b.Navigation("TargetProcesses");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemCategory", b =>
                {
                    b.Navigation("ItemTemplates");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemTemplate", b =>
                {
                    b.Navigation("ItemTemplateAttributes");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemTemplateAttribute", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemUnit", b =>
                {
                    b.Navigation("ItemTemplates");
                });

            modelBuilder.Entity("DataAccess.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("DataAccess.Entities.Phase", b =>
                {
                    b.Navigation("ActivityTasks");
                });

            modelBuilder.Entity("DataAccess.Entities.Post", b =>
                {
                    b.Navigation("PostComments");
                });

            modelBuilder.Entity("DataAccess.Entities.Report", b =>
                {
                    b.Navigation("ScheduledRouteDeliveryRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.ScheduledRoute", b =>
                {
                    b.Navigation("ScheduledRouteDeliveryRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.Stock", b =>
                {
                    b.Navigation("StockUpdatedHistoryDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.StockUpdatedHistory", b =>
                {
                    b.Navigation("StockUpdatedHistoryDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("ActivityFeedbacks");

                    b.Navigation("ActivityMembers");

                    b.Navigation("Branch");

                    b.Navigation("CharityUnit");

                    b.Navigation("CollaboratorApplication");

                    b.Navigation("DonatedRequests");

                    b.Navigation("PostComments");

                    b.Navigation("Posts");

                    b.Navigation("Reports");

                    b.Navigation("ScheduledRoutes");

                    b.Navigation("Stocks");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
